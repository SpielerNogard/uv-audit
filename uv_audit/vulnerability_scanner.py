import asyncio
import aiohttp
from typing import Any


class VulnerabilityScanner:
    def __init__(self):
        pass

    def _get_package_url(self, package_name: str, version: str) -> str:
        return f"https://pypi.org/pypi/{package_name}/{version}/json"

    async def _check_package_vulnerabilities(
        self, session: aiohttp.ClientSession, package_name: str, version: str
    ):
        url = self._get_package_url(package_name, version)

        async with session.get(url, timeout=10) as response:
            if response.status == 200:
                data = await response.json()

                vulnerabilities = data.get("vulnerabilities", [])
                if vulnerabilities:
                    relevant_vulns = []
                    for vuln in vulnerabilities:
                        if vuln["withdrawn"] is None:
                            relevant_vulns.append(vuln)
                    return {
                        "package": package_name,
                        "version": version,
                        "vulnerabilities": relevant_vulns,
                    }
            return {"package": package_name, "version": version, "vulnerabilities": []}

    async def _check_vulnerabilities_parallel(
        self, requirements: list[str]
    ) -> dict[str, Any]:
        packages = []
        for req in requirements:
            if "==" in req:
                package, version = req.strip().split("==", 1)
                packages.append((package.strip(), version.strip()))
        if not packages:
            raise ValueError("No valid packages found in requirements.")

        connector = aiohttp.TCPConnector(limit=50, limit_per_host=20)
        timeout = aiohttp.ClientTimeout(total=30)

        async with aiohttp.ClientSession(
            connector=connector, timeout=timeout
        ) as session:
            # Erstelle Tasks fÃ¼r alle Packages
            tasks = [
                self._check_package_vulnerabilities(session, package, version)
                for package, version in packages
            ]

            results = await asyncio.gather(*tasks, return_exceptions=True)
            return results

    def run_check(self, requirements: list[str]) -> dict[str, Any]:
        results = asyncio.run(self._check_vulnerabilities_parallel(requirements))
        return results


if __name__ == "__main__":
    scanner = VulnerabilityScanner()
    requirements = ["requests==2.32.3", "flask==1.1.2"]
    results = scanner.run_check(requirements)
    print(results)
